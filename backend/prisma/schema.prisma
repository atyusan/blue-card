generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  username             String?               @unique
  password             String
  firstName            String
  lastName             String
  permissions          Json? // Array of permission strings for direct user permissions
  // role field removed - now handled through StaffRoleAssignment
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  auditLogs            AuditLog[]
  patient              Patient?
  staffMember          StaffMember?
  temporaryPermissions TemporaryPermission[]
  permissionRequests   PermissionRequest[]
  permissionApprovals  PermissionApprover[]
  permissionAudits     PermissionAudit[]

  @@map("users")
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  staffMembers StaffMember[]
  services     Service[]
  cashRequests CashRequest[]

  @@map("departments")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  permissions Json? // Array of permission strings
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  staffRoleAssignments StaffRoleAssignment[]

  @@map("roles")
}

model StaffRoleAssignment {
  id            String    @id @default(cuid())
  staffMemberId String
  roleId        String
  assignedBy    String? // Staff member who assigned the role
  assignedAt    DateTime  @default(now())
  isActive      Boolean   @default(true)
  expiresAt     DateTime?
  scope         String    @default("GLOBAL") // GLOBAL, DEPARTMENT, SERVICE, PATIENT
  scopeId       String? // ID of the scoped entity (department, service, patient)
  conditions    Json? // Array of role conditions
  metadata      Json? // Additional context data
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  staffMember     StaffMember  @relation(fields: [staffMemberId], references: [id], onDelete: Cascade)
  role            Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedByStaff StaffMember? @relation("RoleAssignments", fields: [assignedBy], references: [id])

  @@unique([staffMemberId, roleId, scope, scopeId])
  @@map("staff_role_assignments")
}

model StaffMember {
  id             String   @id @default(cuid())
  userId         String   @unique
  employeeId     String   @unique
  departmentId   String? // Changed from department string to foreign key
  department     String // Keep for backward compatibility during migration
  specialization String?
  licenseNumber  String?
  hireDate       DateTime
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  departmentRef               Department?           @relation(fields: [departmentId], references: [id])
  roleAssignments             StaffRoleAssignment[]
  roleAssignmentsGiven        StaffRoleAssignment[] @relation("RoleAssignments")
  temporaryPermissionsGranted TemporaryPermission[]

  // Existing relations
  admissions                Admission[]
  cashTransactions          CashTransaction[]
  consultations             Consultation[]
  labOrders                 LabOrder[]
  pettyCashApprovals        PettyCash[]       @relation("PettyCashApprover")
  pettyCashRequests         PettyCash[]       @relation("PettyCashRequester")
  prescriptions             Prescription[]
  user                      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  anesthesiologistSurgeries Surgery[]         @relation("Anesthesiologist")
  surgeries                 Surgery[]
  appointments              Appointment[]     @relation("ProviderAppointments")

  // Cash Request Relations
  cashRequestRequests   CashRequest[] @relation("CashRequestRequester")
  cashRequestApprovals  CashRequest[] @relation("CashRequestApprover")
  cashRequestRejections CashRequest[] @relation("CashRequestRejector")

  // New appointment-related relations
  providerSlots     AppointmentSlot[]  @relation("ProviderSlots")
  providerSchedules ProviderSchedule[] @relation("ProviderSchedules")
  providerTimeOff   ProviderTimeOff[]  @relation("ProviderTimeOff")
  timeOffApprovals  ProviderTimeOff[]  @relation("TimeOffApprover")

  @@map("staff_members")
}

model Patient {
  id                           String            @id @default(cuid())
  patientId                    String            @unique
  firstName                    String
  lastName                     String
  dateOfBirth                  DateTime
  gender                       Gender
  phoneNumber                  String?
  email                        String?
  address                      String?
  allergies                    String?
  isActive                     Boolean           @default(true)
  createdAt                    DateTime          @default(now())
  updatedAt                    DateTime          @updatedAt
  bloodGroup                   BloodType?
  emergencyContactName         String?
  emergencyContactPhone        String?
  emergencyContactRelationship String?
  genotype                     Genotype?
  height                       String?
  insuranceProvider            String?
  insurancePolicyNumber        String?
  insuranceGroupNumber         String?
  userId                       String?           @unique
  admissions                   Admission[]
  cashTransactions             CashTransaction[]
  consultations                Consultation[]
  invoices                     Invoice[]
  labOrders                    LabOrder[]
  account                      PatientAccount?
  user                         User?             @relation(fields: [userId], references: [id])
  payments                     Payment[]
  paystackCustomer             PaystackCustomer?
  prescriptions                Prescription[]
  refunds                      Refund[]
  surgeries                    Surgery[]

  // New appointment-related relations
  appointments    Appointment[]
  waitlistEntries WaitlistEntry[]
  preferences     PatientPreference[]

  @@map("patients")
}

model PatientAccount {
  id            String   @id @default(cuid())
  patientId     String   @unique
  accountNumber String   @unique
  balance       Decimal  @default(0) @db.Decimal(10, 2)
  creditLimit   Decimal? @db.Decimal(10, 2)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  patient       Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("patient_accounts")
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]

  @@map("service_categories")
}

model Service {
  id                 String          @id @default(cuid())
  name               String
  description        String?
  categoryId         String
  departmentId       String? // New field for department association
  basePrice          Decimal         @db.Decimal(10, 2)
  currentPrice       Decimal         @db.Decimal(10, 2)
  serviceCode        String?
  isActive           Boolean         @default(true)
  requiresPrePayment Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  charges            Charge[]
  dailyCharges       DailyCharge[]
  labTests           LabTest[]
  category           ServiceCategory @relation(fields: [categoryId], references: [id])
  department         Department?     @relation(fields: [departmentId], references: [id])

  @@map("services")
}

model Invoice {
  id                String           @id @default(cuid())
  invoiceNumber     String           @unique
  patientId         String
  totalAmount       Decimal          @db.Decimal(10, 2)
  paidAmount        Decimal          @default(0) @db.Decimal(10, 2)
  balance           Decimal          @db.Decimal(10, 2)
  status            InvoiceStatus    @default(PENDING)
  dueDate           DateTime?
  issuedDate        DateTime         @default(now())
  paidDate          DateTime?
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  paystackInvoiceId String?
  paystackReference String?
  charges           Charge[]
  patient           Patient          @relation(fields: [patientId], references: [id])
  payments          Payment[]
  paystackInvoice   PaystackInvoice?
  refunds           Refund[]
  appointments      Appointment[] // Link to appointments

  @@map("invoices")
}

model Charge {
  id          String   @id @default(cuid())
  invoiceId   String
  serviceId   String
  description String
  quantity    Int      @default(1)
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  service     Service  @relation(fields: [serviceId], references: [id])

  @@map("charges")
}

model Payment {
  id          String        @id @default(cuid())
  invoiceId   String
  patientId   String
  amount      Decimal       @db.Decimal(10, 2)
  method      PaymentMethod
  reference   String?
  status      PaymentStatus @default(PENDING)
  processedBy String
  processedAt DateTime      @default(now())
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  invoice     Invoice       @relation(fields: [invoiceId], references: [id])
  patient     Patient       @relation(fields: [patientId], references: [id])
  refunds     Refund[]

  @@map("payments")
}

model Consultation {
  id               String           @id @default(cuid())
  patientId        String
  doctorId         String
  appointmentDate  DateTime
  consultationType ConsultationType
  diagnosis        String?
  treatment        String?
  notes            String?
  isCompleted      Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  balance          Decimal          @default(0) @db.Decimal(10, 2)
  consultationFee  Decimal          @default(0) @db.Decimal(10, 2)
  isPaid           Boolean          @default(false)
  paidAmount       Decimal          @default(0) @db.Decimal(10, 2)
  totalAmount      Decimal          @default(0) @db.Decimal(10, 2)
  doctor           StaffMember      @relation(fields: [doctorId], references: [id])
  patient          Patient          @relation(fields: [patientId], references: [id])

  @@map("consultations")
}

model LabOrder {
  id          String         @id @default(cuid())
  patientId   String
  doctorId    String
  orderDate   DateTime       @default(now())
  status      LabOrderStatus @default(PENDING)
  isPaid      Boolean        @default(false)
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  balance     Decimal        @default(0) @db.Decimal(10, 2)
  paidAmount  Decimal        @default(0) @db.Decimal(10, 2)
  totalAmount Decimal        @default(0) @db.Decimal(10, 2)
  doctor      StaffMember    @relation(fields: [doctorId], references: [id])
  patient     Patient        @relation(fields: [patientId], references: [id])
  tests       LabTest[]

  @@map("lab_orders")
}

model LabTest {
  id         String        @id @default(cuid())
  orderId    String
  serviceId  String
  result     String?
  status     LabTestStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  isPaid     Boolean       @default(false)
  notes      String?
  totalPrice Decimal       @db.Decimal(10, 2)
  unitPrice  Decimal       @db.Decimal(10, 2)
  order      LabOrder      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service    Service       @relation(fields: [serviceId], references: [id])

  @@map("lab_tests")
}

model Prescription {
  id               String                   @id @default(cuid())
  patientId        String
  doctorId         String
  prescriptionDate DateTime                 @default(now())
  status           PrescriptionStatus       @default(PENDING)
  isPaid           Boolean                  @default(false)
  notes            String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  balance          Decimal                  @default(0) @db.Decimal(10, 2)
  paidAmount       Decimal                  @default(0) @db.Decimal(10, 2)
  totalAmount      Decimal                  @default(0) @db.Decimal(10, 2)
  medications      PrescriptionMedication[]
  doctor           StaffMember              @relation(fields: [doctorId], references: [id])
  patient          Patient                  @relation(fields: [patientId], references: [id])

  @@map("prescriptions")
}

model PrescriptionMedication {
  id             String                @id @default(cuid())
  prescriptionId String
  dosage         String
  frequency      String
  duration       String
  instructions   String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  isPaid         Boolean               @default(false)
  medicationId   String
  quantity       Int
  totalPrice     Decimal               @db.Decimal(10, 2)
  unitPrice      Decimal               @db.Decimal(10, 2)
  dispensedItems DispensedMedication[]
  medication     Medication            @relation(fields: [medicationId], references: [id])
  prescription   Prescription          @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)

  @@map("prescription_medications")
}

model Medication {
  id                   String                   @id @default(cuid())
  name                 String
  genericName          String?
  strength             String?
  form                 String?
  manufacturer         String?
  isActive             Boolean                  @default(true)
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  category             String?
  controlledDrug       Boolean                  @default(false)
  drugCode             String                   @unique
  requiresPrescription Boolean                  @default(true)
  inventoryItems       MedicationInventory[]
  prescriptionItems    PrescriptionMedication[]

  @@map("medications")
}

model MedicationInventory {
  id                String                @id @default(cuid())
  medicationId      String
  batchNumber       String                @unique
  expiryDate        DateTime
  quantity          Int
  availableQuantity Int
  reservedQuantity  Int                   @default(0)
  unitCost          Decimal               @db.Decimal(10, 4)
  sellingPrice      Decimal               @db.Decimal(10, 2)
  supplier          String?
  purchaseDate      DateTime              @default(now())
  isActive          Boolean               @default(true)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  dispensedItems    DispensedMedication[]
  medication        Medication            @relation(fields: [medicationId], references: [id])

  @@map("medication_inventory")
}

model DispensedMedication {
  id                       String                 @id @default(cuid())
  prescriptionMedicationId String
  inventoryItemId          String
  quantity                 Int
  dispensedBy              String
  dispensedAt              DateTime               @default(now())
  batchNumber              String
  expiryDate               DateTime
  notes                    String?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  inventoryItem            MedicationInventory    @relation(fields: [inventoryItemId], references: [id])
  prescriptionMedication   PrescriptionMedication @relation(fields: [prescriptionMedicationId], references: [id])

  @@map("dispensed_medications")
}

model Admission {
  id            String          @id @default(cuid())
  patientId     String
  doctorId      String
  admissionDate DateTime        @default(now())
  dischargeDate DateTime?
  wardType      WardType
  bedNumber     String?
  status        AdmissionStatus @default(ADMITTED)
  depositAmount Decimal         @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  diagnosis     String?
  wardId        String?
  doctor        StaffMember     @relation(fields: [doctorId], references: [id])
  patient       Patient         @relation(fields: [patientId], references: [id])
  ward          Ward?           @relation(fields: [wardId], references: [id])
  dailyCharges  DailyCharge[]
  surgeries     Surgery[]

  @@map("admissions")
}

model Ward {
  id         String      @id @default(cuid())
  name       String
  wardType   WardType
  floor      String?
  capacity   Int         @default(0)
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  admissions Admission[]
  beds       Bed[]
  surgeries  Surgery[]

  @@map("wards")
}

model Bed {
  id         String   @id @default(cuid())
  bedNumber  String   @unique
  wardId     String
  isOccupied Boolean  @default(false)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  ward       Ward     @relation(fields: [wardId], references: [id])

  @@map("beds")
}

model DailyCharge {
  id          String    @id @default(cuid())
  admissionId String
  serviceId   String
  amount      Decimal   @db.Decimal(10, 2)
  description String
  chargeDate  DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  admission   Admission @relation(fields: [admissionId], references: [id])
  service     Service   @relation(fields: [serviceId], references: [id])

  @@map("daily_charges")
}

model Surgery {
  id                    String                 @id @default(cuid())
  patientId             String
  surgeonId             String
  surgeryDate           DateTime
  surgeryType           String
  operatingRoom         String?
  duration              Int?
  status                SurgeryStatus          @default(SCHEDULED)
  notes                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  admissionId           String?
  anesthesiaFee         Decimal                @default(0) @db.Decimal(10, 2)
  anesthesiaType        String?
  anesthesiologistId    String?
  balance               Decimal                @default(0) @db.Decimal(10, 2)
  pacuCharges           Decimal                @default(0) @db.Decimal(10, 2)
  paidAmount            Decimal                @default(0) @db.Decimal(10, 2)
  requiresInpatient     Boolean                @default(false)
  roomBookingEnd        DateTime?
  roomBookingStart      DateTime?
  roomBookingStatus     RoomBookingStatus      @default(PENDING)
  surgeryFee            Decimal                @default(0) @db.Decimal(10, 2)
  totalAmount           Decimal                @default(0) @db.Decimal(10, 2)
  wardId                String?
  operatingRoomBookings OperatingRoomBooking[]
  admission             Admission?             @relation(fields: [admissionId], references: [id])
  anesthesiologist      StaffMember?           @relation("Anesthesiologist", fields: [anesthesiologistId], references: [id])
  patient               Patient                @relation(fields: [patientId], references: [id])
  surgeon               StaffMember            @relation(fields: [surgeonId], references: [id])
  ward                  Ward?                  @relation(fields: [wardId], references: [id])
  surgicalProcedures    SurgicalProcedure[]

  @@map("surgeries")
}

model SurgicalProcedure {
  id            String   @id @default(cuid())
  surgeryId     String
  procedureName String
  description   String?
  cost          Decimal  @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  surgery       Surgery  @relation(fields: [surgeryId], references: [id], onDelete: Cascade)

  @@map("surgical_procedures")
}

model OperatingRoomBooking {
  id          String            @id @default(cuid())
  surgeryId   String
  roomNumber  String
  bookingDate DateTime
  startTime   DateTime
  endTime     DateTime
  status      RoomBookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  surgery     Surgery           @relation(fields: [surgeryId], references: [id], onDelete: Cascade)

  @@map("operating_room_bookings")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  tableName String
  recordId  String
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model CashTransaction {
  id              String            @id @default(cuid())
  cashierId       String
  patientId       String?
  cashRequestId   String? // Link to cash request if applicable
  transactionType TransactionType
  amount          Decimal           @db.Decimal(10, 2)
  description     String
  referenceNumber String?
  notes           String?
  status          TransactionStatus @default(COMPLETED)
  transactionDate DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  cashier         StaffMember       @relation(fields: [cashierId], references: [id])
  patient         Patient?          @relation(fields: [patientId], references: [id])
  cashRequest     CashRequest?      @relation(fields: [cashRequestId], references: [id])

  @@map("cash_transactions")
}

model CashRequest {
  id              String         @id @default(cuid())
  requestNumber   String         @unique // Auto-generated: CR-YYYYMMDD-001
  requesterId     String // Staff member requesting
  departmentId    String // Department making request
  purpose         String // Reason for cash request
  amount          Decimal        @db.Decimal(10, 2)
  urgency         RequestUrgency @default(NORMAL)
  status          RequestStatus  @default(PENDING)
  approvedBy      String? // Cashier who approved
  approvedAt      DateTime?
  rejectionReason String?
  rejectedBy      String?
  rejectedAt      DateTime?
  notes           String?
  attachments     String[] // File paths/URLs
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  requester        StaffMember       @relation("CashRequestRequester", fields: [requesterId], references: [id])
  approver         StaffMember?      @relation("CashRequestApprover", fields: [approvedBy], references: [id])
  rejector         StaffMember?      @relation("CashRequestRejector", fields: [rejectedBy], references: [id])
  cashTransactions CashTransaction[] // One request can have multiple transactions
  department       Department        @relation(fields: [departmentId], references: [id])

  @@map("cash_requests")
}

model PettyCash {
  id              String          @id @default(cuid())
  requesterId     String
  approverId      String?
  amount          Decimal         @db.Decimal(10, 2)
  purpose         String
  description     String?
  expectedDate    DateTime?
  notes           String?
  status          PettyCashStatus @default(PENDING)
  requestDate     DateTime        @default(now())
  approvedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  approver        StaffMember?    @relation("PettyCashApprover", fields: [approverId], references: [id])
  requester       StaffMember     @relation("PettyCashRequester", fields: [requesterId], references: [id])

  @@map("petty_cash")
}

model Refund {
  id              String       @id @default(cuid())
  paymentId       String
  patientId       String
  invoiceId       String
  amount          Decimal      @db.Decimal(10, 2)
  reason          String
  notes           String?
  referenceNumber String?
  status          RefundStatus @default(PENDING)
  refundDate      DateTime     @default(now())
  approvedBy      String?
  approvedAt      DateTime?
  rejectedBy      String?
  rejectedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  invoice         Invoice      @relation(fields: [invoiceId], references: [id])
  patient         Patient      @relation(fields: [patientId], references: [id])
  payment         Payment      @relation(fields: [paymentId], references: [id])

  @@map("refunds")
}

model PaystackCustomer {
  id                 String            @id @default(cuid())
  patientId          String            @unique
  paystackCustomerId String            @unique
  customerCode       String            @unique
  email              String
  firstName          String?
  lastName           String?
  phone              String?
  metadata           Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  patient            Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  paystackInvoices   PaystackInvoice[]

  @@map("paystack_customers")
}

model PaystackInvoice {
  id                 String                @id @default(cuid())
  localInvoiceId     String                @unique
  paystackCustomerId String
  paystackInvoiceId  String                @unique
  requestCode        String                @unique
  offlineReference   String?
  status             PaystackInvoiceStatus @default(PENDING)
  amount             Decimal               @db.Decimal(10, 2)
  currency           String                @default("NGN")
  description        String?
  dueDate            DateTime?
  hasInvoice         Boolean               @default(false)
  invoiceNumber      String?
  pdfUrl             String?
  lineItems          Json?
  tax                Json?
  discount           Json?
  metadata           Json?
  paidAt             DateTime?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  localInvoice       Invoice               @relation(fields: [localInvoiceId], references: [id], onDelete: Cascade)
  paystackCustomer   PaystackCustomer      @relation(fields: [paystackCustomerId], references: [id])

  @@map("paystack_invoices")
}

// ===== APPOINTMENT SCHEDULING SYSTEM =====

model AppointmentSlot {
  id               String   @id @default(cuid())
  providerId       String // Staff member (doctor, specialist)
  resourceId       String? // Room, equipment, etc.
  startTime        DateTime
  endTime          DateTime
  duration         Int // Duration in minutes
  slotType         SlotType
  isAvailable      Boolean  @default(true)
  isBookable       Boolean  @default(true)
  maxBookings      Int      @default(1) // For group sessions
  currentBookings  Int      @default(0)
  bufferTimeBefore Int      @default(0) // Minutes before slot
  bufferTimeAfter  Int      @default(0) // Minutes after slot
  specialty        String? // Medical specialty
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  provider         StaffMember           @relation("ProviderSlots", fields: [providerId], references: [id])
  resource         Resource?             @relation(fields: [resourceId], references: [id])
  appointments     Appointment[]
  recurringPattern RecurringSlotPattern?

  @@map("appointment_slots")
}

model Resource {
  id                  String       @id @default(cuid())
  name                String
  type                ResourceType
  location            String?
  capacity            Int          @default(1)
  isActive            Boolean      @default(true)
  maintenanceSchedule String?
  notes               String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Relations
  slots     AppointmentSlot[]
  schedules ResourceSchedule[]

  @@map("resources")
}

model ResourceSchedule {
  id          String   @id @default(cuid())
  resourceId  String
  dayOfWeek   Int // 0-6 (Sunday-Saturday)
  startTime   String // HH:MM format
  endTime     String // HH:MM format
  isAvailable Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  resource Resource @relation(fields: [resourceId], references: [id])

  @@map("resource_schedules")
}

model RecurringSlotPattern {
  id             String               @id @default(cuid())
  slotId         String               @unique
  patternType    RecurringPatternType
  interval       Int // Every X days/weeks/months
  daysOfWeek     Int[] // [0,1,2,3,4,5,6] for days
  startDate      DateTime
  endDate        DateTime?
  maxOccurrences Int? // Limit number of recurrences
  isActive       Boolean              @default(true)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  slot AppointmentSlot @relation(fields: [slotId], references: [id], onDelete: Cascade)

  @@map("recurring_slot_patterns")
}

model Appointment {
  id              String              @id @default(cuid())
  patientId       String
  slotId          String
  providerId      String // Direct reference to provider for performance
  status          AppointmentStatus   @default(SCHEDULED)
  appointmentType AppointmentType
  priority        AppointmentPriority @default(ROUTINE)

  // Billing Integration
  totalAmount        Decimal @default(0) @db.Decimal(10, 2)
  paidAmount         Decimal @default(0) @db.Decimal(10, 2)
  balance            Decimal @default(0) @db.Decimal(10, 2)
  isPaid             Boolean @default(false)
  requiresPrePayment Boolean @default(true)
  invoiceId          String? // Link to invoice

  // Appointment Details
  reason             String?
  symptoms           String?
  notes              String?
  cancellationReason String?

  // Timing
  scheduledStart DateTime
  scheduledEnd   DateTime
  actualStart    DateTime?
  actualEnd      DateTime?
  checkInTime    DateTime?

  // Bundle Support
  parentAppointmentId String? // For bundled appointments
  bundleId            String? // Group related appointments

  // Relations
  patient           Patient                   @relation(fields: [patientId], references: [id])
  slot              AppointmentSlot           @relation(fields: [slotId], references: [id])
  provider          StaffMember               @relation("ProviderAppointments", fields: [providerId], references: [id])
  parentAppointment Appointment?              @relation("AppointmentBundle", fields: [parentAppointmentId], references: [id])
  childAppointments Appointment[]             @relation("AppointmentBundle")
  bundle            AppointmentBundle?        @relation(fields: [bundleId], references: [id])
  invoice           Invoice?                  @relation(fields: [invoiceId], references: [id])
  notifications     AppointmentNotification[]
  preferences       PatientPreference[]
  waitlist          WaitlistEntry?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

model AppointmentBundle {
  id             String     @id @default(cuid())
  name           String
  description    String?
  bundleType     BundleType
  totalAmount    Decimal    @default(0) @db.Decimal(10, 2)
  discountAmount Decimal    @default(0) @db.Decimal(10, 2)
  finalAmount    Decimal    @default(0) @db.Decimal(10, 2)
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  appointments Appointment[]

  @@map("appointment_bundles")
}

model WaitlistEntry {
  id                 String           @id @default(cuid())
  appointmentId      String           @unique
  patientId          String
  requestedDate      DateTime
  preferredTimeSlots String[] // Array of preferred time ranges
  priority           WaitlistPriority @default(NORMAL)
  status             WaitlistStatus   @default(ACTIVE)
  notes              String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  // Relations
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patient     Patient     @relation(fields: [patientId], references: [id])

  @@map("waitlist_entries")
}

model PatientPreference {
  id              String         @id @default(cuid())
  patientId       String
  appointmentId   String?
  preferenceType  PreferenceType
  preferenceValue String // JSON string for complex preferences
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  patient     Patient      @relation(fields: [patientId], references: [id])
  appointment Appointment? @relation(fields: [appointmentId], references: [id])

  @@map("patient_preferences")
}

model AppointmentNotification {
  id               String              @id @default(cuid())
  appointmentId    String
  notificationType NotificationType
  channel          NotificationChannel
  recipient        String // Email, phone, or user ID
  content          String
  status           NotificationStatus  @default(PENDING)
  sentAt           DateTime?
  deliveredAt      DateTime?
  readAt           DateTime?
  errorMessage     String?
  retryCount       Int                 @default(0)
  maxRetries       Int                 @default(3)
  scheduledFor     DateTime? // For scheduled notifications
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  // Relations
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("appointment_notifications")
}

model ProviderSchedule {
  id              String   @id @default(cuid())
  providerId      String
  dayOfWeek       Int // 0-6 (Sunday-Saturday)
  startTime       String // HH:MM format
  endTime         String // HH:MM format
  breakStart      String? // HH:MM format
  breakEnd        String? // HH:MM format
  isAvailable     Boolean  @default(true)
  maxAppointments Int      @default(20)
  slotDuration    Int      @default(30) // Minutes
  bufferTime      Int      @default(5) // Minutes between appointments
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  provider StaffMember @relation("ProviderSchedules", fields: [providerId], references: [id])

  @@map("provider_schedules")
}

model ProviderTimeOff {
  id         String        @id @default(cuid())
  providerId String
  startDate  DateTime
  endDate    DateTime
  reason     String
  type       TimeOffType
  status     TimeOffStatus @default(PENDING)
  approvedBy String?
  approvedAt DateTime?
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  provider StaffMember  @relation("ProviderTimeOff", fields: [providerId], references: [id])
  approver StaffMember? @relation("TimeOffApprover", fields: [approvedBy], references: [id])

  @@map("provider_time_off")
}

enum PaystackInvoiceStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

// UserRole enum removed - now handled through Role model and StaffRoleAssignment

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum Genotype {
  AA
  AS
  AC
  SS
  SC
  CC
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PARTIAL
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_MONEY
  INSURANCE
  CREDIT
  PAYSTACK_TERMINAL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUND_REQUESTED
  REFUNDED
}

enum ConsultationType {
  GENERAL
  SPECIALIST
  FOLLOW_UP
  EMERGENCY
}

enum LabOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum LabTestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PrescriptionStatus {
  PENDING
  DISPENSED
  CANCELLED
}

enum AdmissionStatus {
  ADMITTED
  DISCHARGED
  TRANSFERRED
  CANCELLED
}

enum WardType {
  GENERAL
  PRIVATE
  ICU
  NURSERY
  MATERNITY
  PEDIATRIC
}

enum SurgeryStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RoomBookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum TransactionType {
  CASH_IN
  CASH_OUT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

enum PettyCashStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RequestUrgency {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  COMPLETED
}

// ===== APPOINTMENT SCHEDULING ENUMS =====

enum SlotType {
  CONSULTATION
  LAB_TEST
  IMAGING
  SURGERY
  FOLLOW_UP
  EMERGENCY
  GROUP_SESSION
  TELEMEDICINE
}

enum ResourceType {
  CONSULTATION_ROOM
  LAB_ROOM
  IMAGING_ROOM
  OPERATING_ROOM
  RECOVERY_ROOM
  EQUIPMENT
  VEHICLE
}

enum RecurringPatternType {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum AppointmentType {
  GENERAL_CONSULTATION
  SPECIALIST_CONSULTATION
  LAB_TEST
  IMAGING
  SURGERY
  FOLLOW_UP
  EMERGENCY
  TELEMEDICINE
  PREVENTIVE_CARE
}

enum AppointmentPriority {
  ROUTINE
  URGENT
  EMERGENCY
  VIP
  FOLLOW_UP
}

enum BundleType {
  CONSULTATION_LAB
  CONSULTATION_IMAGING
  SURGERY_PACKAGE
  PREVENTIVE_PACKAGE
  SPECIALIST_PACKAGE
}

enum WaitlistPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum WaitlistStatus {
  ACTIVE
  FILLED
  CANCELLED
  EXPIRED
}

enum PreferenceType {
  PROVIDER_PREFERENCE
  TIME_PREFERENCE
  LOCATION_PREFERENCE
  COMMUNICATION_PREFERENCE
  SPECIAL_NEEDS
}

// ===== NOTIFICATION SYSTEM =====

enum NotificationType {
  APPOINTMENT_CONFIRMATION
  APPOINTMENT_REMINDER
  APPOINTMENT_CANCELLATION
  APPOINTMENT_RESCHEDULE
  PRE_VISIT_INSTRUCTIONS
  PAYMENT_REMINDER
  WAITLIST_UPDATE
  PAYMENT_RECEIVED
  PAYMENT_OVERDUE
  GENERAL_ANNOUNCEMENT
  SYSTEM_ALERT
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH_NOTIFICATION
  IN_APP
  PHONE_CALL
  WEBHOOK
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
  CANCELLED
  SCHEDULED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model NotificationTemplate {
  id        String              @id @default(cuid())
  name      String              @unique
  type      String
  channel   NotificationChannel
  subject   String?
  content   String
  variables Json? // Array of variable names that can be replaced
  isActive  Boolean             @default(true)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("notification_templates")
}

model Notification {
  id              String               @id @default(cuid())
  type            String
  channel         NotificationChannel
  recipientId     String
  recipientType   String // PATIENT, STAFF, USER, etc.
  subject         String?
  content         String
  metadata        Json? // Additional data for the notification
  scheduledFor    DateTime? // For scheduled notifications
  sentAt          DateTime?
  status          NotificationStatus   @default(PENDING)
  priority        NotificationPriority @default(NORMAL)
  failureReason   String?
  retryCount      Int                  @default(0)
  deliveryDetails Json? // Delivery confirmation details
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  // Relations
  recipient Json? // Polymorphic relation - could be Patient, StaffMember, User, etc.

  @@map("notifications")
}

enum TimeOffType {
  VACATION
  SICK_LEAVE
  PERSONAL_LEAVE
  TRAINING
  CONFERENCE
  OTHER
}

enum TimeOffStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum PermissionRequestUrgency {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum PermissionRequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  EXPIRED
}

enum PermissionApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  ABSTAINED
}

enum PermissionRiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PermissionAuditLevel {
  BASIC
  STANDARD
  DETAILED
  COMPREHENSIVE
}

model PermissionTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  category    String
  permissions Json // Array of permission strings
  isSystem    Boolean  @default(false)
  version     String   @default("1.0.0")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  presets PermissionPreset[]

  @@map("permission_templates")
}

model PermissionPreset {
  id             String   @id @default(cuid())
  name           String   @unique
  description    String?
  templateId     String
  customizations Json // Array of PermissionCustomization objects
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  template PermissionTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("permission_presets")
}

model TemporaryPermission {
  id         String   @id @default(cuid())
  userId     String
  permission String
  grantedBy  String
  grantedAt  DateTime @default(now())
  expiresAt  DateTime
  reason     String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user           User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  grantedByStaff StaffMember            @relation(fields: [grantedBy], references: [id])
  auditTrail     PermissionAuditEntry[]

  @@map("temporary_permissions")
}

model PermissionAuditEntry {
  id          String   @id @default(cuid())
  action      String // GRANTED, REVOKED, EXPIRED, EXTENDED
  timestamp   DateTime @default(now())
  performedBy String
  reason      String?
  metadata    Json? // Additional context data

  // Relations
  temporaryPermissionId String?
  temporaryPermission   TemporaryPermission? @relation(fields: [temporaryPermissionId], references: [id], onDelete: Cascade)

  @@map("permission_audit_entries")
}

model PermissionRequest {
  id          String                   @id @default(cuid())
  requesterId String
  permission  String
  reason      String
  urgency     PermissionRequestUrgency @default(NORMAL)
  status      PermissionRequestStatus  @default(PENDING)
  requestedAt DateTime                 @default(now())
  expiresAt   DateTime?
  attachments Json? // Array of attachment metadata
  metadata    Json? // Additional request context
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt

  // Relations
  requester User                 @relation(fields: [requesterId], references: [id], onDelete: Cascade)
  approvers PermissionApprover[]

  @@map("permission_requests")
}

model PermissionApprover {
  id                  String                   @id @default(cuid())
  permissionRequestId String
  userId              String
  role                String // APPROVER, FINAL_APPROVER, etc.
  status              PermissionApprovalStatus @default(PENDING)
  required            Boolean                  @default(true)
  comments            String?
  approvedAt          DateTime?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt

  // Relations
  permissionRequest PermissionRequest @relation(fields: [permissionRequestId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([permissionRequestId, userId])
  @@map("permission_approvers")
}

model PermissionWorkflow {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  steps       Json // Array of workflow step configurations
  isActive    Boolean  @default(true)
  version     String   @default("1.0.0")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("permission_workflows")
}

model PermissionSecurity {
  permission         String               @id
  riskLevel          PermissionRiskLevel  @default(MEDIUM)
  requiresMFA        Boolean              @default(false)
  requiresApproval   Boolean              @default(true)
  maxDuration        Int? // Maximum duration in hours for temporary grants
  allowedIPs         Json? // Array of allowed IP addresses
  allowedDevices     Json? // Array of allowed device identifiers
  allowedTimeWindows Json? // Array of allowed time windows
  auditLevel         PermissionAuditLevel @default(STANDARD)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@map("permission_security")
}

model PermissionAudit {
  id         String   @id @default(cuid())
  userId     String
  permission String
  action     String // ACCESSED, DENIED, GRANTED, REVOKED
  timestamp  DateTime @default(now())
  ipAddress  String?
  userAgent  String?
  location   String?
  deviceId   String?
  sessionId  String?
  metadata   Json? // Additional audit context
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("permission_audits")
}
